"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require("babel-runtime/core-js/object/get-prototype-of");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _ReMedi = require("../../ethereum/ReMedi");

var _ReMedi2 = _interopRequireDefault(_ReMedi);

var _semanticUiReact = require("semantic-ui-react");

var _routes = require("../../routes");

var _Layout = require("../../components/Layout");

var _Layout2 = _interopRequireDefault(_Layout);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = "C:\\Users\\rohan\\Desktop\\temp\\ReMedi\\pages\\Patient\\index.js?entry";


var PatientPage = function (_Component) {
	(0, _inherits3.default)(PatientPage, _Component);

	function PatientPage() {
		(0, _classCallCheck3.default)(this, PatientPage);

		return (0, _possibleConstructorReturn3.default)(this, (PatientPage.__proto__ || (0, _getPrototypeOf2.default)(PatientPage)).apply(this, arguments));
	}

	(0, _createClass3.default)(PatientPage, [{
		key: "renderFiles",
		value: function renderFiles() {
			if (this.props.files.length == 0) {
				return _react2.default.createElement(_semanticUiReact.Segment, {
					__source: {
						fileName: _jsxFileName,
						lineNumber: 24
					}
				}, _react2.default.createElement(_semanticUiReact.Header, { icon: true, textAlign: "center", __source: {
						fileName: _jsxFileName,
						lineNumber: 25
					}
				}, _react2.default.createElement(_semanticUiReact.Icon, { name: "pdf file outline", __source: {
						fileName: _jsxFileName,
						lineNumber: 26
					}
				}), "No documents are uploaded."));
			}
			console.log(this.props.info);
			var items = this.props.files.map(function (file) {
				return {
					header: file[2],
					description: file[3],
					extra: _react2.default.createElement(_semanticUiReact.Container, { textAlign: "center", __source: {
							fileName: _jsxFileName,
							lineNumber: 38
						}
					}, _react2.default.createElement("a", { href: "https://ipfs.io/ipfs/" + file[0], target: "_blank", __source: {
							fileName: _jsxFileName,
							lineNumber: 39
						}
					}, _react2.default.createElement(_semanticUiReact.Button, { primary: true, __source: {
							fileName: _jsxFileName,
							lineNumber: 40
						}
					}, "View File")), _react2.default.createElement(_semanticUiReact.Button, { onClick: function onClick() {
							return navigator.clipboard.writeText(file[0]);
						}, __source: {
							fileName: _jsxFileName,
							lineNumber: 42
						}
					}, "Copy File Hash"))
				};
			});
			return _react2.default.createElement(_semanticUiReact.Card.Group, { items: items, __source: {
					fileName: _jsxFileName,
					lineNumber: 49
				}
			});
		}
	}, {
		key: "render",
		value: function render() {
			return _react2.default.createElement(_Layout2.default, {
				__source: {
					fileName: _jsxFileName,
					lineNumber: 54
				}
			}, _react2.default.createElement(_routes.Link, { route: "/Patient/" + this.props.address + "/upload", __source: {
					fileName: _jsxFileName,
					lineNumber: 55
				}
			}, _react2.default.createElement("a", {
				__source: {
					fileName: _jsxFileName,
					lineNumber: 56
				}
			}, _react2.default.createElement(_semanticUiReact.Button, { icon: true, primary: true, labelPosition: "right", __source: {
					fileName: _jsxFileName,
					lineNumber: 57
				}
			}, "Upload File", _react2.default.createElement(_semanticUiReact.Icon, { name: "upload", __source: {
					fileName: _jsxFileName,
					lineNumber: 59
				}
			})))), _react2.default.createElement(_routes.Link, { route: "/Patient/" + this.props.address + "/access", __source: {
					fileName: _jsxFileName,
					lineNumber: 64
				}
			}, _react2.default.createElement("a", {
				__source: {
					fileName: _jsxFileName,
					lineNumber: 65
				}
			}, _react2.default.createElement(_semanticUiReact.Button, { icon: true, labelPosition: "right", style: { marginTop: "2em" }, __source: {
					fileName: _jsxFileName,
					lineNumber: 66
				}
			}, "Access Menu", _react2.default.createElement(_semanticUiReact.Icon, { name: "right arrow", __source: {
					fileName: _jsxFileName,
					lineNumber: 68
				}
			})))), _react2.default.createElement(_semanticUiReact.Header, {
				__source: {
					fileName: _jsxFileName,
					lineNumber: 72
				}
			}, "Patient Home Page"), this.renderFiles());
		}
	}], [{
		key: "getInitialProps",
		value: function () {
			var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(props) {
				var address, files;
				return _regenerator2.default.wrap(function _callee$(_context) {
					while (1) {
						switch (_context.prev = _context.next) {
							case 0:
								address = props.query.address;
								_context.next = 3;
								return _ReMedi2.default.methods.getFiles().call({ from: address });

							case 3:
								files = _context.sent;
								return _context.abrupt("return", { files: files, address: address });

							case 5:
							case "end":
								return _context.stop();
						}
					}
				}, _callee, this);
			}));

			function getInitialProps(_x) {
				return _ref.apply(this, arguments);
			}

			return getInitialProps;
		}()
	}]);

	return PatientPage;
}(_react.Component);

exports.default = PatientPage;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiUGF0aWVudFBhZ2UiLCJfQ29tcG9uZW50IiwiX19wcm90b19fIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJrZXkiLCJ2YWx1ZSIsInJlbmRlckZpbGVzIiwicHJvcHMiLCJmaWxlcyIsImxlbmd0aCIsImNyZWF0ZUVsZW1lbnQiLCJfX3NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsImljb24iLCJ0ZXh0QWxpZ24iLCJuYW1lIiwiY29uc29sZSIsImxvZyIsImluZm8iLCJpdGVtcyIsIm1hcCIsImZpbGUiLCJoZWFkZXIiLCJkZXNjcmlwdGlvbiIsImV4dHJhIiwiaHJlZiIsInRhcmdldCIsInByaW1hcnkiLCJvbkNsaWNrIiwibmF2aWdhdG9yIiwiY2xpcGJvYXJkIiwid3JpdGVUZXh0IiwiR3JvdXAiLCJyZW5kZXIiLCJyb3V0ZSIsImFkZHJlc3MiLCJsYWJlbFBvc2l0aW9uIiwic3R5bGUiLCJtYXJnaW5Ub3AiLCJfcmVmIiwibWFyayIsIl9jYWxsZWUiLCJ3cmFwIiwiX2NhbGxlZSQiLCJfY29udGV4dCIsInByZXYiLCJuZXh0IiwicXVlcnkiLCJtZXRob2RzIiwiZ2V0RmlsZXMiLCJjYWxsIiwiZnJvbSIsInNlbnQiLCJhYnJ1cHQiLCJzdG9wIiwiZ2V0SW5pdGlhbFByb3BzIiwiX3giXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFDQTs7OztBQUNBOztBQUNBOztBQUNBOzs7Ozs7QUFMQSxJQUFJQSxlQUFlLHlFQUFuQjs7O0FBT0EsSUFBSUMsY0FBYyxVQUFVQyxVQUFWLEVBQXNCO0FBQ3ZDLHlCQUFVRCxXQUFWLEVBQXVCQyxVQUF2Qjs7QUFFQSxVQUFTRCxXQUFULEdBQXVCO0FBQ3RCLGdDQUFnQixJQUFoQixFQUFzQkEsV0FBdEI7O0FBRUEsU0FBTyx5Q0FBMkIsSUFB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LFNBQWpCLENBQVA7QUFDQTs7QUFFRCxVQUFPcUQsZUFBUDtBQUNBLEdBNUJNO0FBRkgsRUFBRCxDQW5LSjs7QUFvTUEsUUFBT3pELFdBQVA7QUFDQSxDQTlNaUIsa0JBQWxCOztrQkFnTmVBLFciLCJmaWxlIjoidW5rbm93biIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfcmVnZW5lcmF0b3JSdW50aW1lIGZyb20gXCJiYWJlbC1ydW50aW1lL3JlZ2VuZXJhdG9yXCI7XG5pbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSBcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9hc3luY1RvR2VuZXJhdG9yXCI7XG5pbXBvcnQgX09iamVjdCRnZXRQcm90b3R5cGVPZiBmcm9tIFwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mXCI7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tIFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI7XG52YXIgX2pzeEZpbGVOYW1lID0gXCJDOlxcXFxVc2Vyc1xcXFxyb2hhblxcXFxEZXNrdG9wXFxcXHRlbXBcXFxcUmVNZWRpXFxcXHBhZ2VzXFxcXFBhdGllbnRcXFxcaW5kZXguanM/ZW50cnlcIjtcbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBSZU1lZGkgZnJvbSBcIi4uLy4uL2V0aGVyZXVtL1JlTWVkaVwiO1xuaW1wb3J0IHsgQ2FyZCwgQ29udGFpbmVyLCBIZWFkZXIsIEJ1dHRvbiwgSWNvbiwgU2VnbWVudCB9IGZyb20gXCJzZW1hbnRpYy11aS1yZWFjdFwiO1xuaW1wb3J0IHsgTGluayB9IGZyb20gXCIuLi8uLi9yb3V0ZXNcIjtcbmltcG9ydCBMYXlvdXQgZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvTGF5b3V0XCI7XG5cbnZhciBQYXRpZW50UGFnZSA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG5cdF9pbmhlcml0cyhQYXRpZW50UGFnZSwgX0NvbXBvbmVudCk7XG5cblx0ZnVuY3Rpb24gUGF0aWVudFBhZ2UoKSB7XG5cdFx0X2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBhdGllbnRQYWdlKTtcblxuXHRcdHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoUGF0aWVudFBhZ2UuX19wcm90b19fIHx8IF9PYmplY3QkZ2V0UHJvdG90eXBlT2YoUGF0aWVudFBhZ2UpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcblx0fVxuXG5cdF9jcmVhdGVDbGFzcyhQYXRpZW50UGFnZSwgW3tcblx0XHRrZXk6IFwicmVuZGVyRmlsZXNcIixcblx0XHR2YWx1ZTogZnVuY3Rpb24gcmVuZGVyRmlsZXMoKSB7XG5cdFx0XHRpZiAodGhpcy5wcm9wcy5maWxlcy5sZW5ndGggPT0gMCkge1xuXHRcdFx0XHRyZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcblx0XHRcdFx0XHRTZWdtZW50LFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdF9fc291cmNlOiB7XG5cdFx0XHRcdFx0XHRcdGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsXG5cdFx0XHRcdFx0XHRcdGxpbmVOdW1iZXI6IDI0XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRSZWFjdC5jcmVhdGVFbGVtZW50KFxuXHRcdFx0XHRcdFx0SGVhZGVyLFxuXHRcdFx0XHRcdFx0eyBpY29uOiB0cnVlLCB0ZXh0QWxpZ246IFwiY2VudGVyXCIsIF9fc291cmNlOiB7XG5cdFx0XHRcdFx0XHRcdFx0ZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcblx0XHRcdFx0XHRcdFx0XHRsaW5lTnVtYmVyOiAyNVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0UmVhY3QuY3JlYXRlRWxlbWVudChJY29uLCB7IG5hbWU6IFwicGRmIGZpbGUgb3V0bGluZVwiLCBfX3NvdXJjZToge1xuXHRcdFx0XHRcdFx0XHRcdGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsXG5cdFx0XHRcdFx0XHRcdFx0bGluZU51bWJlcjogMjZcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSksXG5cdFx0XHRcdFx0XHRcIk5vIGRvY3VtZW50cyBhcmUgdXBsb2FkZWQuXCJcblx0XHRcdFx0XHQpXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0XHRjb25zb2xlLmxvZyh0aGlzLnByb3BzLmluZm8pO1xuXHRcdFx0dmFyIGl0ZW1zID0gdGhpcy5wcm9wcy5maWxlcy5tYXAoZnVuY3Rpb24gKGZpbGUpIHtcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRoZWFkZXI6IGZpbGVbMl0sXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IGZpbGVbM10sXG5cdFx0XHRcdFx0ZXh0cmE6IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG5cdFx0XHRcdFx0XHRDb250YWluZXIsXG5cdFx0XHRcdFx0XHR7IHRleHRBbGlnbjogXCJjZW50ZXJcIiwgX19zb3VyY2U6IHtcblx0XHRcdFx0XHRcdFx0XHRmaWxlTmFtZTogX2pzeEZpbGVOYW1lLFxuXHRcdFx0XHRcdFx0XHRcdGxpbmVOdW1iZXI6IDM4XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRSZWFjdC5jcmVhdGVFbGVtZW50KFxuXHRcdFx0XHRcdFx0XHRcImFcIixcblx0XHRcdFx0XHRcdFx0eyBocmVmOiBcImh0dHBzOi8vaXBmcy5pby9pcGZzL1wiICsgZmlsZVswXSwgdGFyZ2V0OiBcIl9ibGFua1wiLCBfX3NvdXJjZToge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcblx0XHRcdFx0XHRcdFx0XHRcdGxpbmVOdW1iZXI6IDM5XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHRSZWFjdC5jcmVhdGVFbGVtZW50KFxuXHRcdFx0XHRcdFx0XHRcdEJ1dHRvbixcblx0XHRcdFx0XHRcdFx0XHR7IHByaW1hcnk6IHRydWUsIF9fc291cmNlOiB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGxpbmVOdW1iZXI6IDQwXG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0XHRcIlZpZXcgRmlsZVwiXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0XHRSZWFjdC5jcmVhdGVFbGVtZW50KFxuXHRcdFx0XHRcdFx0XHRCdXR0b24sXG5cdFx0XHRcdFx0XHRcdHsgb25DbGljazogZnVuY3Rpb24gb25DbGljaygpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBuYXZpZ2F0b3IuY2xpcGJvYXJkLndyaXRlVGV4dChmaWxlWzBdKTtcblx0XHRcdFx0XHRcdFx0XHR9LCBfX3NvdXJjZToge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcblx0XHRcdFx0XHRcdFx0XHRcdGxpbmVOdW1iZXI6IDQyXG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHRcIkNvcHkgRmlsZSBIYXNoXCJcblx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHQpXG5cdFx0XHRcdH07XG5cdFx0XHR9KTtcblx0XHRcdHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENhcmQuR3JvdXAsIHsgaXRlbXM6IGl0ZW1zLCBfX3NvdXJjZToge1xuXHRcdFx0XHRcdGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsXG5cdFx0XHRcdFx0bGluZU51bWJlcjogNDlcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9LCB7XG5cdFx0a2V5OiBcInJlbmRlclwiLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG5cdFx0XHRyZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcblx0XHRcdFx0TGF5b3V0LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0X19zb3VyY2U6IHtcblx0XHRcdFx0XHRcdGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsXG5cdFx0XHRcdFx0XHRsaW5lTnVtYmVyOiA1NFxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblx0XHRcdFx0UmVhY3QuY3JlYXRlRWxlbWVudChcblx0XHRcdFx0XHRMaW5rLFxuXHRcdFx0XHRcdHsgcm91dGU6IFwiL1BhdGllbnQvXCIgKyB0aGlzLnByb3BzLmFkZHJlc3MgKyBcIi91cGxvYWRcIiwgX19zb3VyY2U6IHtcblx0XHRcdFx0XHRcdFx0ZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcblx0XHRcdFx0XHRcdFx0bGluZU51bWJlcjogNTVcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG5cdFx0XHRcdFx0XHRcImFcIixcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0X19zb3VyY2U6IHtcblx0XHRcdFx0XHRcdFx0XHRmaWxlTmFtZTogX2pzeEZpbGVOYW1lLFxuXHRcdFx0XHRcdFx0XHRcdGxpbmVOdW1iZXI6IDU2XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRSZWFjdC5jcmVhdGVFbGVtZW50KFxuXHRcdFx0XHRcdFx0XHRCdXR0b24sXG5cdFx0XHRcdFx0XHRcdHsgaWNvbjogdHJ1ZSwgcHJpbWFyeTogdHJ1ZSwgbGFiZWxQb3NpdGlvbjogXCJyaWdodFwiLCBfX3NvdXJjZToge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcblx0XHRcdFx0XHRcdFx0XHRcdGxpbmVOdW1iZXI6IDU3XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHRcIlVwbG9hZCBGaWxlXCIsXG5cdFx0XHRcdFx0XHRcdFJlYWN0LmNyZWF0ZUVsZW1lbnQoSWNvbiwgeyBuYW1lOiBcInVwbG9hZFwiLCBfX3NvdXJjZToge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcblx0XHRcdFx0XHRcdFx0XHRcdGxpbmVOdW1iZXI6IDU5XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9KVxuXHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdClcblx0XHRcdFx0KSxcblx0XHRcdFx0UmVhY3QuY3JlYXRlRWxlbWVudChcblx0XHRcdFx0XHRMaW5rLFxuXHRcdFx0XHRcdHsgcm91dGU6IFwiL1BhdGllbnQvXCIgKyB0aGlzLnByb3BzLmFkZHJlc3MgKyBcIi9hY2Nlc3NcIiwgX19zb3VyY2U6IHtcblx0XHRcdFx0XHRcdFx0ZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcblx0XHRcdFx0XHRcdFx0bGluZU51bWJlcjogNjRcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG5cdFx0XHRcdFx0XHRcImFcIixcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0X19zb3VyY2U6IHtcblx0XHRcdFx0XHRcdFx0XHRmaWxlTmFtZTogX2pzeEZpbGVOYW1lLFxuXHRcdFx0XHRcdFx0XHRcdGxpbmVOdW1iZXI6IDY1XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRSZWFjdC5jcmVhdGVFbGVtZW50KFxuXHRcdFx0XHRcdFx0XHRCdXR0b24sXG5cdFx0XHRcdFx0XHRcdHsgaWNvbjogdHJ1ZSwgbGFiZWxQb3NpdGlvbjogXCJyaWdodFwiLCBzdHlsZTogeyBtYXJnaW5Ub3A6IFwiMmVtXCIgfSwgX19zb3VyY2U6IHtcblx0XHRcdFx0XHRcdFx0XHRcdGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsXG5cdFx0XHRcdFx0XHRcdFx0XHRsaW5lTnVtYmVyOiA2NlxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0XCJBY2Nlc3MgTWVudVwiLFxuXHRcdFx0XHRcdFx0XHRSZWFjdC5jcmVhdGVFbGVtZW50KEljb24sIHsgbmFtZTogXCJyaWdodCBhcnJvd1wiLCBfX3NvdXJjZToge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcblx0XHRcdFx0XHRcdFx0XHRcdGxpbmVOdW1iZXI6IDY4XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9KVxuXHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdClcblx0XHRcdFx0KSxcblx0XHRcdFx0UmVhY3QuY3JlYXRlRWxlbWVudChcblx0XHRcdFx0XHRIZWFkZXIsXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0X19zb3VyY2U6IHtcblx0XHRcdFx0XHRcdFx0ZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcblx0XHRcdFx0XHRcdFx0bGluZU51bWJlcjogNzJcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFwiUGF0aWVudCBIb21lIFBhZ2VcIlxuXHRcdFx0XHQpLFxuXHRcdFx0XHR0aGlzLnJlbmRlckZpbGVzKClcblx0XHRcdCk7XG5cdFx0fVxuXHR9XSwgW3tcblx0XHRrZXk6IFwiZ2V0SW5pdGlhbFByb3BzXCIsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uICgpIHtcblx0XHRcdHZhciBfcmVmID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZShwcm9wcykge1xuXHRcdFx0XHR2YXIgYWRkcmVzcywgZmlsZXM7XG5cdFx0XHRcdHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHtcblx0XHRcdFx0XHR3aGlsZSAoMSkge1xuXHRcdFx0XHRcdFx0c3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkge1xuXHRcdFx0XHRcdFx0XHRjYXNlIDA6XG5cdFx0XHRcdFx0XHRcdFx0YWRkcmVzcyA9IHByb3BzLnF1ZXJ5LmFkZHJlc3M7XG5cdFx0XHRcdFx0XHRcdFx0X2NvbnRleHQubmV4dCA9IDM7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIFJlTWVkaS5tZXRob2RzLmdldEZpbGVzKCkuY2FsbCh7IGZyb206IGFkZHJlc3MgfSk7XG5cblx0XHRcdFx0XHRcdFx0Y2FzZSAzOlxuXHRcdFx0XHRcdFx0XHRcdGZpbGVzID0gX2NvbnRleHQuc2VudDtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gX2NvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIHsgZmlsZXM6IGZpbGVzLCBhZGRyZXNzOiBhZGRyZXNzIH0pO1xuXG5cdFx0XHRcdFx0XHRcdGNhc2UgNTpcblx0XHRcdFx0XHRcdFx0Y2FzZSBcImVuZFwiOlxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBfY29udGV4dC5zdG9wKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LCBfY2FsbGVlLCB0aGlzKTtcblx0XHRcdH0pKTtcblxuXHRcdFx0ZnVuY3Rpb24gZ2V0SW5pdGlhbFByb3BzKF94KSB7XG5cdFx0XHRcdHJldHVybiBfcmVmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBnZXRJbml0aWFsUHJvcHM7XG5cdFx0fSgpXG5cdH1dKTtcblxuXHRyZXR1cm4gUGF0aWVudFBhZ2U7XG59KENvbXBvbmVudCk7XG5cbmV4cG9ydCBkZWZhdWx0IFBhdGllbnRQYWdlOyJdfQ==
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiUGF0aWVudFBhZ2UiLCJfQ29tcG9uZW50IiwiX19wcm90b19fIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJrZXkiLCJ2YWx1ZSIsInJlbmRlckZpbGVzIiwicHJvcHMiLCJmaWxlcyIsImxlbmd0aCIsImNyZWF0ZUVsZW1lbnQiLCJfX3NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsImljb24iLCJ0ZXh0QWxpZ24iLCJuYW1lIiwiY29uc29sZSIsImxvZyIsImluZm8iLCJpdGVtcyIsIm1hcCIsImZpbGUiLCJoZWFkZXIiLCJkZXNjcmlwdGlvbiIsImV4dHJhIiwiaHJlZiIsInRhcmdldCIsInByaW1hcnkiLCJvbkNsaWNrIiwibmF2aWdhdG9yIiwiY2xpcGJvYXJkIiwid3JpdGVUZXh0IiwiR3JvdXAiLCJyZW5kZXIiLCJyb3V0ZSIsImFkZHJlc3MiLCJsYWJlbFBvc2l0aW9uIiwic3R5bGUiLCJtYXJnaW5Ub3AiLCJfcmVmIiwibWFyayIsIl9jYWxsZWUiLCJ3cmFwIiwiX2NhbGxlZSQiLCJfY29udGV4dCIsInByZXYiLCJuZXh0IiwicXVlcnkiLCJtZXRob2RzIiwiZ2V0RmlsZXMiLCJjYWxsIiwiZnJvbSIsInNlbnQiLCJhYnJ1cHQiLCJzdG9wIiwiZ2V0SW5pdGlhbFByb3BzIiwiX3giXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFDQTs7OztBQUNBOztBQUNBOztBQUNBOzs7Ozs7QUFMQSxJQUFJQSxlQUFlLHlFQUFuQjs7O0FBT0EsSUFBSUMsY0FBYyxVQUFVQyxVQUFWLEVBQXNCO0FBQ3ZDLHlCQUFVRCxXQUFWLEVBQXVCQyxVQUF2Qjs7QUFFQSxVQUFTRCxXQUFULEdBQXVCO0FBQ3RCLGdDQUFnQixJQUFoQixFQUFzQkEsV0FBdEI7O0FBRUEsU0FBTyx5Q0FBMkIsSUFB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