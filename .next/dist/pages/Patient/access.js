"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require("babel-runtime/core-js/object/get-prototype-of");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _Layout = require("../../components/Layout");

var _Layout2 = _interopRequireDefault(_Layout);

var _semanticUiReact = require("semantic-ui-react");

var _ReMedi = require("../../ethereum/ReMedi");

var _ReMedi2 = _interopRequireDefault(_ReMedi);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

<<<<<<< HEAD
var _jsxFileName = "C:\\Users\\rohan\\Desktop\\temp\\ReMedi\\pages\\Patient\\access.js?entry";
=======
var _jsxFileName = "C:\\Users\\Shruti Pancholi\\ReMedi Project\\ReMedi\\pages\\Patient\\access.js?entry";
>>>>>>> 2d1db716ce4a18ceb7768d381ca515f02ef7ed8d


var Access = function (_Component) {
	(0, _inherits3.default)(Access, _Component);

	function Access() {
		var _ref,
		    _this2 = this;

		var _temp, _this, _ret;

		(0, _classCallCheck3.default)(this, Access);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Access.__proto__ || (0, _getPrototypeOf2.default)(Access)).call.apply(_ref, [this].concat(args))), _this), _this.state = { doctor: "", filehash: "", loading: "", errorMessage: "" }, _this.renderGrantAccess = function () {
			return _react2.default.createElement(_semanticUiReact.Tab.Pane, { attached: false, __source: {
					fileName: _jsxFileName,
					lineNumber: 16
				}
			}, _react2.default.createElement(_semanticUiReact.Header, {
				__source: {
					fileName: _jsxFileName,
					lineNumber: 17
				}
			}, "Grant File Access"), _react2.default.createElement(_semanticUiReact.Form, { onSubmit: _this.GrantAccess, error: !!_this.state.errorMessage, __source: {
					fileName: _jsxFileName,
					lineNumber: 18
				}
			}, _react2.default.createElement(_semanticUiReact.Form.Field, {
				__source: {
					fileName: _jsxFileName,
					lineNumber: 19
				}
			}, _react2.default.createElement("label", {
				__source: {
					fileName: _jsxFileName,
					lineNumber: 20
				}
			}, "Doctor Account Address"), _react2.default.createElement(_semanticUiReact.Form.Input, {
				value: _this.state.doctor,
				onChange: function onChange(event) {
					_this.setState({ doctor: event.target.value });
				},
				__source: {
					fileName: _jsxFileName,
					lineNumber: 21
				}
			})), _react2.default.createElement(_semanticUiReact.Form.Field, {
				__source: {
					fileName: _jsxFileName,
					lineNumber: 28
				}
			}, _react2.default.createElement("label", {
				__source: {
					fileName: _jsxFileName,
					lineNumber: 29
				}
			}, "File Hash"), _react2.default.createElement(_semanticUiReact.Form.Input, {
				value: _this.state.filehash,
				type: "password",
				onChange: function onChange(event) {
					_this.setState({ filehash: event.target.value });
				},
				__source: {
					fileName: _jsxFileName,
					lineNumber: 30
				}
			})), _react2.default.createElement(_semanticUiReact.Message, { error: true, header: "Oops!", content: _this.state.errorMessage, __source: {
					fileName: _jsxFileName,
					lineNumber: 38
				}
			}), _react2.default.createElement(_semanticUiReact.Form.Button, { loading: _this.state.loading, color: "blue", type: "submit", __source: {
					fileName: _jsxFileName,
					lineNumber: 39
				}
			}, "Grant Access")));
		}, _this.renderRevokeAccess = function () {
			return _react2.default.createElement(_semanticUiReact.Tab.Pane, { attached: false, __source: {
					fileName: _jsxFileName,
					lineNumber: 49
				}
			}, _react2.default.createElement(_semanticUiReact.Header, {
				__source: {
					fileName: _jsxFileName,
					lineNumber: 50
				}
			}, "Revoke File Access"), _react2.default.createElement(_semanticUiReact.Form, { onSubmit: _this.RevokeAccess, error: !!_this.state.errorMessage, __source: {
					fileName: _jsxFileName,
					lineNumber: 51
				}
			}, _react2.default.createElement(_semanticUiReact.Form.Field, {
				__source: {
					fileName: _jsxFileName,
					lineNumber: 52
				}
			}, _react2.default.createElement("label", {
				__source: {
					fileName: _jsxFileName,
					lineNumber: 53
				}
			}, "Doctor Account Address"), _react2.default.createElement(_semanticUiReact.Form.Input, {
				value: _this.state.doctor,
				onChange: function onChange(event) {
					_this.setState({ doctor: event.target.value });
				},
				__source: {
					fileName: _jsxFileName,
					lineNumber: 54
				}
			})), _react2.default.createElement(_semanticUiReact.Form.Field, {
				__source: {
					fileName: _jsxFileName,
					lineNumber: 61
				}
			}, _react2.default.createElement("label", {
				__source: {
					fileName: _jsxFileName,
					lineNumber: 62
				}
			}, "File Hash"), _react2.default.createElement(_semanticUiReact.Form.Input, {
				value: _this.state.filehash,
				type: "password",
				onChange: function onChange(event) {
					_this.setState({ filehash: event.target.value });
				},
				__source: {
					fileName: _jsxFileName,
					lineNumber: 63
				}
			})), _react2.default.createElement(_semanticUiReact.Message, { error: true, header: "Oops!", content: _this.state.errorMessage, __source: {
					fileName: _jsxFileName,
					lineNumber: 71
				}
			}), _react2.default.createElement(_semanticUiReact.Form.Button, { loading: _this.state.loading, color: "blue", type: "submit", __source: {
					fileName: _jsxFileName,
					lineNumber: 72
				}
			}, "Revoke Access")));
		}, _this.renderControls = function () {
			var panes = [{
				menuItem: "Grant File Access",
				render: function render() {
					return _this.renderGrantAccess();
				}
			}, {
				menuItem: "Revoke File Access",
				render: function render() {
					return _this.renderRevokeAccess();
				}
			}];

			return _react2.default.createElement(_semanticUiReact.Tab, { menu: { secondary: true }, panes: panes, __source: {
					fileName: _jsxFileName,
					lineNumber: 96
				}
			});
		}, _this.GrantAccess = function () {
			var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(event) {
				return _regenerator2.default.wrap(function _callee$(_context) {
					while (1) {
						switch (_context.prev = _context.next) {
							case 0:
								event.preventDefault();
								_this.setState({ loading: true, errorMessage: "" });
								_context.prev = 2;
								_context.next = 5;
								return _ReMedi2.default.methods.grant_FileAccess(_this.state.doctor, _this.state.filehash).send({ from: _this.props.address });

							case 5:
								_context.next = 10;
								break;

							case 7:
								_context.prev = 7;
								_context.t0 = _context["catch"](2);

								_this.setState({ errorMessage: _context.t0.message });

							case 10:
								_this.setState({ loading: false });

							case 11:
							case "end":
								return _context.stop();
						}
					}
				}, _callee, _this2, [[2, 7]]);
			}));

			return function (_x) {
				return _ref2.apply(this, arguments);
			};
		}(), _this.RevokeAccess = function () {
			var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(event) {
				return _regenerator2.default.wrap(function _callee2$(_context2) {
					while (1) {
						switch (_context2.prev = _context2.next) {
							case 0:
								event.preventDefault();
								_this.setState({ loading: true, errorMessage: "" });
								_context2.prev = 2;
								_context2.next = 5;
								return _ReMedi2.default.methods.denied_FileAccess(_this.state.doctor, _this.state.filehash).send({ from: _this.props.address });

							case 5:
								_context2.next = 10;
								break;

							case 7:
								_context2.prev = 7;
								_context2.t0 = _context2["catch"](2);

								_this.setState({ errorMessage: _context2.t0.message });

							case 10:
								_this.setState({ loading: false });

							case 11:
							case "end":
								return _context2.stop();
						}
					}
				}, _callee2, _this2, [[2, 7]]);
			}));

			return function (_x2) {
				return _ref3.apply(this, arguments);
			};
		}(), _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	}

	(0, _createClass3.default)(Access, [{
		key: "render",
		value: function render() {
			return _react2.default.createElement(_Layout2.default, {
				__source: {
					fileName: _jsxFileName,
					lineNumber: 127
				}
			}, _react2.default.createElement(_semanticUiReact.Header, {
				__source: {
					fileName: _jsxFileName,
					lineNumber: 128
				}
			}, "Access Control"), this.renderControls());
		}
	}], [{
		key: "getInitialProps",
		value: function () {
			var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(props) {
				var address;
				return _regenerator2.default.wrap(function _callee3$(_context3) {
					while (1) {
						switch (_context3.prev = _context3.next) {
							case 0:
								address = props.query.address;
								return _context3.abrupt("return", { address: address });

							case 2:
							case "end":
								return _context3.stop();
						}
					}
				}, _callee3, this);
			}));

			function getInitialProps(_x3) {
				return _ref4.apply(this, arguments);
			}

			return getInitialProps;
		}()
	}]);

	return Access;
}(_react.Component);

exports.default = Access;
<<<<<<< HEAD
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
=======
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
>>>>>>> 2d1db716ce4a18ceb7768d381ca515f02ef7ed8d
