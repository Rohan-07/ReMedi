"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require("babel-runtime/core-js/object/get-prototype-of");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require("semantic-ui-react");

var _ipfsHttpClient = require("ipfs-http-client");

var _ipfsHttpClient2 = _interopRequireDefault(_ipfsHttpClient);

var _ReMedi = require("../../ethereum/ReMedi");

var _ReMedi2 = _interopRequireDefault(_ReMedi);

var _routes = require("../../routes");

var _Layout = require("../../components/Layout");

var _Layout2 = _interopRequireDefault(_Layout);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = "D:\\Temp_exp\\ReMedi\\pages\\Patient\\upload.js?entry";


var Upload = function (_Component) {
	(0, _inherits3.default)(Upload, _Component);

	function Upload() {
		var _ref,
		    _this2 = this;

		var _temp, _this, _ret;

		(0, _classCallCheck3.default)(this, Upload);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Upload.__proto__ || (0, _getPrototypeOf2.default)(Upload)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
			buffer: null,
			filehash: "",
			loading: false,
			filename: "",
			filedescription: "",
			errorMessage: ""
		}, _this.onChange = function (event) {
			event.preventDefault();
			var file = event.target.files[0];
			var reader = new window.FileReader();
			reader.readAsArrayBuffer(file);
			reader.onloadend = function () {
				_this.setState({ buffer: Buffer(reader.result) });
			};
		}, _this.onSubmit = function () {
			var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(event) {
				var ipfs;
				return _regenerator2.default.wrap(function _callee2$(_context2) {
					while (1) {
						switch (_context2.prev = _context2.next) {
							case 0:
								event.preventDefault();
								_this.setState({ loading: true });
								ipfs = (0, _ipfsHttpClient2.default)({
									host: "ipfs.infura.io",
									port: 5001,
									protocol: "https"
								});

								console.log("Submiting the file to IPFS");
								_context2.next = 6;
								return ipfs.add(_this.state.buffer, function () {
									var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(error, result) {
										return _regenerator2.default.wrap(function _callee$(_context) {
											while (1) {
												switch (_context.prev = _context.next) {
													case 0:
														console.log("IPFS result", result);
														console.log(result[0].hash);
														_this.setState({ filehash: result[0].hash }, function () {
															_this.uploadfile();
														});

														if (!error) {
															_context.next = 6;
															break;
														}

														console.log(error);
														return _context.abrupt("return");

													case 6:
													case "end":
														return _context.stop();
												}
											}
										}, _callee, _this2);
									}));

									return function (_x2, _x3) {
										return _ref3.apply(this, arguments);
									};
								}());

							case 6:
							case "end":
								return _context2.stop();
						}
					}
				}, _callee2, _this2);
			}));

			return function (_x) {
				return _ref2.apply(this, arguments);
			};
		}(), _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	}

	(0, _createClass3.default)(Upload, [{
		key: "uploadfile",
		value: function () {
			var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3() {
				var _state, filehash, filedescription, filename;

				return _regenerator2.default.wrap(function _callee3$(_context3) {
					while (1) {
						switch (_context3.prev = _context3.next) {
							case 0:
								this.setState({ perrorMessage: "" });
								_context3.prev = 1;
								_state = this.state, filehash = _state.filehash, filedescription = _state.filedescription, filename = _state.filename;
								_context3.next = 5;
								return _ReMedi2.default.methods.create_file(filehash, filedescription, filename).send({ from: this.props.address });

							case 5:
								_routes.Router.pushRoute("/Patient/" + this.props.address);
								_context3.next = 11;
								break;

							case 8:
								_context3.prev = 8;
								_context3.t0 = _context3["catch"](1);

								this.setState({ errorMessage: _context3.t0.message });

							case 11:
								this.setState({ loading: false });

							case 12:
							case "end":
								return _context3.stop();
						}
					}
				}, _callee3, this, [[1, 8]]);
			}));

			function uploadfile() {
				return _ref4.apply(this, arguments);
			}

			return uploadfile;
		}()
	}, {
		key: "render",
		value: function render() {
			var _this3 = this;

			return _react2.default.createElement(_Layout2.default, {
				__source: {
					fileName: _jsxFileName,
					lineNumber: 72
				}
			}, _react2.default.createElement(_semanticUiReact.Header, {
				__source: {
					fileName: _jsxFileName,
					lineNumber: 73
				}
			}, "Upload file"), _react2.default.createElement(_semanticUiReact.Segment, {
				__source: {
					fileName: _jsxFileName,
					lineNumber: 74
				}
			}, _react2.default.createElement(_semanticUiReact.Form, { onSubmit: this.onSubmit, error: !!this.state.errorMessage, __source: {
					fileName: _jsxFileName,
					lineNumber: 75
				}
			}, _react2.default.createElement(_semanticUiReact.Form.Field, {
				__source: {
					fileName: _jsxFileName,
					lineNumber: 76
				}
			}, _react2.default.createElement("label", {
				__source: {
					fileName: _jsxFileName,
					lineNumber: 77
				}
			}, "Name"), _react2.default.createElement(_semanticUiReact.Form.Input, {
				value: this.state.filename,
				onChange: function onChange(event) {
					_this3.setState({ filename: event.target.value });
				},
				__source: {
					fileName: _jsxFileName,
					lineNumber: 78
				}
			})), _react2.default.createElement(_semanticUiReact.Form.Field, {
				__source: {
					fileName: _jsxFileName,
					lineNumber: 85
				}
			}, _react2.default.createElement("label", {
				__source: {
					fileName: _jsxFileName,
					lineNumber: 86
				}
			}, "Description"), _react2.default.createElement(_semanticUiReact.Form.TextArea, {
				value: this.state.filedescription,
				onChange: function onChange(event) {
					_this3.setState({ filedescription: event.target.value });
				},
				__source: {
					fileName: _jsxFileName,
					lineNumber: 87
				}
			})), _react2.default.createElement(_semanticUiReact.Form.Field, {
				__source: {
					fileName: _jsxFileName,
					lineNumber: 94
				}
			}, _react2.default.createElement("label", {
				__source: {
					fileName: _jsxFileName,
					lineNumber: 95
				}
			}, "File directory"), _react2.default.createElement(_semanticUiReact.Form.Input, { type: "file", onChange: this.onChange, __source: {
					fileName: _jsxFileName,
					lineNumber: 96
				}
			})), _react2.default.createElement(_semanticUiReact.Form.Button, {
				color: "blue",
				type: "submit",
				loading: this.state.loading,
				__source: {
					fileName: _jsxFileName,
					lineNumber: 98
				}
			}, "Submit"), _react2.default.createElement(_semanticUiReact.Message, { error: true, header: "Oops!", content: this.state.errorMessage, __source: {
					fileName: _jsxFileName,
					lineNumber: 105
				}
			}))));
		}
	}], [{
		key: "getInitialProps",
		value: function () {
			var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(props) {
				var address;
				return _regenerator2.default.wrap(function _callee4$(_context4) {
					while (1) {
						switch (_context4.prev = _context4.next) {
							case 0:
								address = props.query.address;
								return _context4.abrupt("return", { address: address });

							case 2:
							case "end":
								return _context4.stop();
						}
					}
				}, _callee4, this);
			}));

			function getInitialProps(_x4) {
				return _ref5.apply(this, arguments);
			}

			return getInitialProps;
		}()
	}]);

	return Upload;
}(_react.Component);

exports.default = Upload;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiVXBsb2FkIiwiX0NvbXBvbmVudCIsIl9yZWYiLCJfdGhpczIiLCJfdGVtcCIsIl90aGlzIiwiX3JldCIsIl9sZW4iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJhcmdzIiwiQXJyYXkiLCJfa2V5IiwiX19wcm90b19fIiwiY2FsbCIsImFwcGx5IiwiY29uY2F0Iiwic3RhdGUiLCJidWZmZXIiLCJmaWxlaGFzaCIsImxvYWRpbmciLCJmaWxlbmFtZSIsImZpbGVkZXNjcmlwdGlvbiIsImVycm9yTWVzc2FnZSIsIm9uQ2hhbmdlIiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsImZpbGUiLCJ0YXJnZXQiLCJmaWxlcyIsInJlYWRlciIsIndpbmRvdyIsIkZpbGVSZWFkZXIiLCJyZWFkQXNBcnJheUJ1ZmZlciIsIm9ubG9hZGVuZCIsInNldFN0YXRlIiwiQnVmZmVyIiwicmVzdWx0Iiwib25TdWJtaXQiLCJfcmVmMiIsIm1hcmsiLCJfY2FsbGVlMiIsImlwZnMiLCJ3cmFwIiwiX2NhbGxlZTIkIiwiX2NvbnRleHQyIiwicHJldiIsIm5leHQiLCJob3N0IiwicG9ydCIsInByb3RvY29sIiwiY29uc29sZSIsImxvZyIsImFkZCIsIl9yZWYzIiwiX2NhbGxlZSIsImVycm9yIiwiX2NhbGxlZSQiLCJfY29udGV4dCIsImhhc2giLCJ1cGxvYWRmaWxlIiwiYWJydXB0Iiwic3RvcCIsIl94MiIsIl94MyIsIl94Iiwia2V5IiwidmFsdWUiLCJfcmVmNCIsIl9jYWxsZWUzIiwiX3N0YXRlIiwiX2NhbGxlZTMkIiwiX2NvbnRleHQzIiwicGVycm9yTWVzc2FnZSIsIm1ldGhvZHMiLCJjcmVhdGVfZmlsZSIsInNlbmQiLCJmcm9tIiwicHJvcHMiLCJhZGRyZXNzIiwicHVzaFJvdXRlIiwidDAiLCJtZXNzYWdlIiwicmVuZGVyIiwiX3RoaXMzIiwiY3JlYXRlRWxlbWVudCIsIl9fc291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiRmllbGQiLCJJbnB1dCIsIlRleHRBcmVhIiwidHlwZSIsIkJ1dHRvbiIsImNvbG9yIiwiaGVhZGVyIiwiY29udGVudCIsIl9yZWY1IiwiX2NhbGxlZTQiLCJfY2FsbGVlNCQiLCJfY29udGV4dDQiLCJxdWVyeSIsImdldEluaXRpYWxQcm9wcyIsIl94NCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7QUFDQTs7Ozs7O0FBTkEsSUFBSUEsZUFBZSx1REFBbkI7OztBQVFBLElBQUlDLFNBQVMsVUFBVUMsVUFBVixFQUFzQjtBQUNsQyx5QkFBVUQsTUFBVixFQUFrQkMsVUFBbEI7O0FBRUEsVUFBU0QsTUFBVCxHQUFrQjtBQUNqQixNQUFJRSxJQUFKO0FBQUEsTUFDSUMsU0FBUyxJQURiOztBQUdBLE1BQUlDLEtBQUosRUFBV0MsS0FBWCxFQUFrQkMsSUFBbEI7O0FBRUEsZ0NBQWdCLElBQWhCLEVBQXNCTixNQUF0Qjs7QUFFQSxPQUFLLElBQUlPLE9BQU9DLFVBQVVDLE1BQXJCLEVBQTZCQyxPQUFPQyxNQUFNSixJQUFOLENBQXBDLEVBQWlESyxPQUFPLENBQTdELEVBQWdFQSxPQUFPTCxJQUF2RSxFQUE2RUssTUFBN0UsRUFBcUY7QUFDcEZGLFFBQUtFLElBQUwsSUFBYUosVUFBVUksSUFBVixDQUFiO0FBQ0E7O0FBRUQsU0FBT04sUUFBUUYsU0FBU0MsUUFBUSx5Q0FBMkIsSUFBM0IsRUFBaUMsQ0FBQ0gsT0FBT0YsT0FBT2EsU0FBUCxJQUFvQiw4QkFBdUJiLE1BQXZCLENBQTVCLEVBQTREYyxJQUE1RCxDQUFpRUMsS0FBakUsQ0FBdUViLElBQXZFLEVBQTZFLENBQUMsSUFBRCxFQUFPYyxNQUFQLENBQWNOLElBQWQsQ0FBN0UsQ0FBakMsQ0FBUixFQUE2SUwsS0FBdEosR0FBOEpBLE1BQU1ZLEtBQU4sR0FBYztBQUMxTEMs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QSxNIiwiZmlsZSI6InVua25vd24iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgX3JlZ2VuZXJhdG9yUnVudGltZSBmcm9tIFwiYmFiZWwtcnVudGltZS9yZWdlbmVyYXRvclwiO1xuaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvYXN5bmNUb0dlbmVyYXRvclwiO1xuaW1wb3J0IF9PYmplY3QkZ2V0UHJvdG90eXBlT2YgZnJvbSBcImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZlwiO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tIFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIjtcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tIFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjtcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSBcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiO1xudmFyIF9qc3hGaWxlTmFtZSA9IFwiRDpcXFxcVGVtcF9leHBcXFxcUmVNZWRpXFxcXHBhZ2VzXFxcXFBhdGllbnRcXFxcdXBsb2FkLmpzP2VudHJ5XCI7XG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBIZWFkZXIsIEZvcm0sIE1lc3NhZ2UsIFNlZ21lbnQgfSBmcm9tIFwic2VtYW50aWMtdWktcmVhY3RcIjtcbmltcG9ydCBpcGZzQ2xpZW50IGZyb20gXCJpcGZzLWh0dHAtY2xpZW50XCI7XG5pbXBvcnQgUmVNZWRpIGZyb20gXCIuLi8uLi9ldGhlcmV1bS9SZU1lZGlcIjtcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gXCIuLi8uLi9yb3V0ZXNcIjtcbmltcG9ydCBMYXlvdXQgZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvTGF5b3V0XCI7XG5cbnZhciBVcGxvYWQgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuXHRfaW5oZXJpdHMoVXBsb2FkLCBfQ29tcG9uZW50KTtcblxuXHRmdW5jdGlvbiBVcGxvYWQoKSB7XG5cdFx0dmFyIF9yZWYsXG5cdFx0ICAgIF90aGlzMiA9IHRoaXM7XG5cblx0XHR2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG5cdFx0X2NsYXNzQ2FsbENoZWNrKHRoaXMsIFVwbG9hZCk7XG5cblx0XHRmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuXHRcdFx0YXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcblx0XHR9XG5cblx0XHRyZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gVXBsb2FkLl9fcHJvdG9fXyB8fCBfT2JqZWN0JGdldFByb3RvdHlwZU9mKFVwbG9hZCkpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0YXRlID0ge1xuXHRcdFx0YnVmZmVyOiBudWxsLFxuXHRcdFx0ZmlsZWhhc2g6IFwiXCIsXG5cdFx0XHRsb2FkaW5nOiBmYWxzZSxcblx0XHRcdGZpbGVuYW1lOiBcIlwiLFxuXHRcdFx0ZmlsZWRlc2NyaXB0aW9uOiBcIlwiLFxuXHRcdFx0ZXJyb3JNZXNzYWdlOiBcIlwiXG5cdFx0fSwgX3RoaXMub25DaGFuZ2UgPSBmdW5jdGlvbiAoZXZlbnQpIHtcblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHR2YXIgZmlsZSA9IGV2ZW50LnRhcmdldC5maWxlc1swXTtcblx0XHRcdHZhciByZWFkZXIgPSBuZXcgd2luZG93LkZpbGVSZWFkZXIoKTtcblx0XHRcdHJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihmaWxlKTtcblx0XHRcdHJlYWRlci5vbmxvYWRlbmQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdF90aGlzLnNldFN0YXRlKHsgYnVmZmVyOiBCdWZmZXIocmVhZGVyLnJlc3VsdCkgfSk7XG5cdFx0XHR9O1xuXHRcdH0sIF90aGlzLm9uU3VibWl0ID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0dmFyIF9yZWYyID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoZXZlbnQpIHtcblx0XHRcdFx0dmFyIGlwZnM7XG5cdFx0XHRcdHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0Mikge1xuXHRcdFx0XHRcdHdoaWxlICgxKSB7XG5cdFx0XHRcdFx0XHRzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHtcblx0XHRcdFx0XHRcdFx0Y2FzZSAwOlxuXHRcdFx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRcdFx0X3RoaXMuc2V0U3RhdGUoeyBsb2FkaW5nOiB0cnVlIH0pO1xuXHRcdFx0XHRcdFx0XHRcdGlwZnMgPSBpcGZzQ2xpZW50KHtcblx0XHRcdFx0XHRcdFx0XHRcdGhvc3Q6IFwiaXBmcy5pbmZ1cmEuaW9cIixcblx0XHRcdFx0XHRcdFx0XHRcdHBvcnQ6IDUwMDEsXG5cdFx0XHRcdFx0XHRcdFx0XHRwcm90b2NvbDogXCJodHRwc1wiXG5cdFx0XHRcdFx0XHRcdFx0fSk7XG5cblxuXHRcdFx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKFwiU3VibWl0aW5nIHRoZSBmaWxlIHRvIElQRlNcIik7XG5cdFx0XHRcdFx0XHRcdFx0X2NvbnRleHQyLm5leHQgPSA2O1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBpcGZzLmFkZChfdGhpcy5zdGF0ZS5idWZmZXIsIGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHZhciBfcmVmMyA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoZXJyb3IsIHJlc3VsdCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0d2hpbGUgKDEpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Y2FzZSAwOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKFwiSVBGUyByZXN1bHRcIiwgcmVzdWx0KTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRjb25zb2xlLmxvZyhyZXN1bHRbMF0uaGFzaCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0X3RoaXMuc2V0U3RhdGUoeyBmaWxlaGFzaDogcmVzdWx0WzBdLmhhc2ggfSwgZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0X3RoaXMudXBsb2FkZmlsZSgpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH0pO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCFlcnJvcikge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0X2NvbnRleHQubmV4dCA9IDY7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRjb25zb2xlLmxvZyhlcnJvcik7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIF9jb250ZXh0LmFicnVwdChcInJldHVyblwiKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRjYXNlIDY6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGNhc2UgXCJlbmRcIjpcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gX2NvbnRleHQuc3RvcCgpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0fSwgX2NhbGxlZSwgX3RoaXMyKTtcblx0XHRcdFx0XHRcdFx0XHRcdH0pKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uIChfeDIsIF94Mykge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gX3JlZjMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHRcdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHRcdFx0fSgpKTtcblxuXHRcdFx0XHRcdFx0XHRjYXNlIDY6XG5cdFx0XHRcdFx0XHRcdGNhc2UgXCJlbmRcIjpcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gX2NvbnRleHQyLnN0b3AoKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sIF9jYWxsZWUyLCBfdGhpczIpO1xuXHRcdFx0fSkpO1xuXG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24gKF94KSB7XG5cdFx0XHRcdHJldHVybiBfcmVmMi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdFx0fTtcblx0XHR9KCksIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuXHR9XG5cblx0X2NyZWF0ZUNsYXNzKFVwbG9hZCwgW3tcblx0XHRrZXk6IFwidXBsb2FkZmlsZVwiLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiAoKSB7XG5cdFx0XHR2YXIgX3JlZjQgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMygpIHtcblx0XHRcdFx0dmFyIF9zdGF0ZSwgZmlsZWhhc2gsIGZpbGVkZXNjcmlwdGlvbiwgZmlsZW5hbWU7XG5cblx0XHRcdFx0cmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMyQoX2NvbnRleHQzKSB7XG5cdFx0XHRcdFx0d2hpbGUgKDEpIHtcblx0XHRcdFx0XHRcdHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkge1xuXHRcdFx0XHRcdFx0XHRjYXNlIDA6XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5zZXRTdGF0ZSh7IHBlcnJvck1lc3NhZ2U6IFwiXCIgfSk7XG5cdFx0XHRcdFx0XHRcdFx0X2NvbnRleHQzLnByZXYgPSAxO1xuXHRcdFx0XHRcdFx0XHRcdF9zdGF0ZSA9IHRoaXMuc3RhdGUsIGZpbGVoYXNoID0gX3N0YXRlLmZpbGVoYXNoLCBmaWxlZGVzY3JpcHRpb24gPSBfc3RhdGUuZmlsZWRlc2NyaXB0aW9uLCBmaWxlbmFtZSA9IF9zdGF0ZS5maWxlbmFtZTtcblx0XHRcdFx0XHRcdFx0XHRfY29udGV4dDMubmV4dCA9IDU7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIFJlTWVkaS5tZXRob2RzLmNyZWF0ZV9maWxlKGZpbGVoYXNoLCBmaWxlZGVzY3JpcHRpb24sIGZpbGVuYW1lKS5zZW5kKHsgZnJvbTogdGhpcy5wcm9wcy5hZGRyZXNzIH0pO1xuXG5cdFx0XHRcdFx0XHRcdGNhc2UgNTpcblx0XHRcdFx0XHRcdFx0XHRSb3V0ZXIucHVzaFJvdXRlKFwiL1BhdGllbnQvXCIgKyB0aGlzLnByb3BzLmFkZHJlc3MpO1xuXHRcdFx0XHRcdFx0XHRcdF9jb250ZXh0My5uZXh0ID0gMTE7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdFx0Y2FzZSA4OlxuXHRcdFx0XHRcdFx0XHRcdF9jb250ZXh0My5wcmV2ID0gODtcblx0XHRcdFx0XHRcdFx0XHRfY29udGV4dDMudDAgPSBfY29udGV4dDNbXCJjYXRjaFwiXSgxKTtcblxuXHRcdFx0XHRcdFx0XHRcdHRoaXMuc2V0U3RhdGUoeyBlcnJvck1lc3NhZ2U6IF9jb250ZXh0My50MC5tZXNzYWdlIH0pO1xuXG5cdFx0XHRcdFx0XHRcdGNhc2UgMTE6XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5zZXRTdGF0ZSh7IGxvYWRpbmc6IGZhbHNlIH0pO1xuXG5cdFx0XHRcdFx0XHRcdGNhc2UgMTI6XG5cdFx0XHRcdFx0XHRcdGNhc2UgXCJlbmRcIjpcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gX2NvbnRleHQzLnN0b3AoKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sIF9jYWxsZWUzLCB0aGlzLCBbWzEsIDhdXSk7XG5cdFx0XHR9KSk7XG5cblx0XHRcdGZ1bmN0aW9uIHVwbG9hZGZpbGUoKSB7XG5cdFx0XHRcdHJldHVybiBfcmVmNC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdXBsb2FkZmlsZTtcblx0XHR9KClcblx0fSwge1xuXHRcdGtleTogXCJyZW5kZXJcIixcblx0XHR2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuXHRcdFx0dmFyIF90aGlzMyA9IHRoaXM7XG5cblx0XHRcdHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuXHRcdFx0XHRMYXlvdXQsXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRfX3NvdXJjZToge1xuXHRcdFx0XHRcdFx0ZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcblx0XHRcdFx0XHRcdGxpbmVOdW1iZXI6IDcyXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRSZWFjdC5jcmVhdGVFbGVtZW50KFxuXHRcdFx0XHRcdEhlYWRlcixcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRfX3NvdXJjZToge1xuXHRcdFx0XHRcdFx0XHRmaWxlTmFtZTogX2pzeEZpbGVOYW1lLFxuXHRcdFx0XHRcdFx0XHRsaW5lTnVtYmVyOiA3M1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XCJVcGxvYWQgZmlsZVwiXG5cdFx0XHRcdCksXG5cdFx0XHRcdFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG5cdFx0XHRcdFx0U2VnbWVudCxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRfX3NvdXJjZToge1xuXHRcdFx0XHRcdFx0XHRmaWxlTmFtZTogX2pzeEZpbGVOYW1lLFxuXHRcdFx0XHRcdFx0XHRsaW5lTnVtYmVyOiA3NFxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0UmVhY3QuY3JlYXRlRWxlbWVudChcblx0XHRcdFx0XHRcdEZvcm0sXG5cdFx0XHRcdFx0XHR7IG9uU3VibWl0OiB0aGlzLm9uU3VibWl0LCBlcnJvcjogISF0aGlzLnN0YXRlLmVycm9yTWVzc2FnZSwgX19zb3VyY2U6IHtcblx0XHRcdFx0XHRcdFx0XHRmaWxlTmFtZTogX2pzeEZpbGVOYW1lLFxuXHRcdFx0XHRcdFx0XHRcdGxpbmVOdW1iZXI6IDc1XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRSZWFjdC5jcmVhdGVFbGVtZW50KFxuXHRcdFx0XHRcdFx0XHRGb3JtLkZpZWxkLFxuXHRcdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdFx0X19zb3VyY2U6IHtcblx0XHRcdFx0XHRcdFx0XHRcdGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsXG5cdFx0XHRcdFx0XHRcdFx0XHRsaW5lTnVtYmVyOiA3NlxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0UmVhY3QuY3JlYXRlRWxlbWVudChcblx0XHRcdFx0XHRcdFx0XHRcImxhYmVsXCIsXG5cdFx0XHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRcdFx0X19zb3VyY2U6IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0ZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0bGluZU51bWJlcjogNzdcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHRcdFwiTmFtZVwiXG5cdFx0XHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0XHRcdFJlYWN0LmNyZWF0ZUVsZW1lbnQoRm9ybS5JbnB1dCwge1xuXHRcdFx0XHRcdFx0XHRcdHZhbHVlOiB0aGlzLnN0YXRlLmZpbGVuYW1lLFxuXHRcdFx0XHRcdFx0XHRcdG9uQ2hhbmdlOiBmdW5jdGlvbiBvbkNoYW5nZShldmVudCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0X3RoaXMzLnNldFN0YXRlKHsgZmlsZW5hbWU6IGV2ZW50LnRhcmdldC52YWx1ZSB9KTtcblx0XHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHRcdF9fc291cmNlOiB7XG5cdFx0XHRcdFx0XHRcdFx0XHRmaWxlTmFtZTogX2pzeEZpbGVOYW1lLFxuXHRcdFx0XHRcdFx0XHRcdFx0bGluZU51bWJlcjogNzhcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0pXG5cdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0UmVhY3QuY3JlYXRlRWxlbWVudChcblx0XHRcdFx0XHRcdFx0Rm9ybS5GaWVsZCxcblx0XHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRcdF9fc291cmNlOiB7XG5cdFx0XHRcdFx0XHRcdFx0XHRmaWxlTmFtZTogX2pzeEZpbGVOYW1lLFxuXHRcdFx0XHRcdFx0XHRcdFx0bGluZU51bWJlcjogODVcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcdFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG5cdFx0XHRcdFx0XHRcdFx0XCJsYWJlbFwiLFxuXHRcdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHRcdF9fc291cmNlOiB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGxpbmVOdW1iZXI6IDg2XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0XHRcIkRlc2NyaXB0aW9uXCJcblx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdFx0UmVhY3QuY3JlYXRlRWxlbWVudChGb3JtLlRleHRBcmVhLCB7XG5cdFx0XHRcdFx0XHRcdFx0dmFsdWU6IHRoaXMuc3RhdGUuZmlsZWRlc2NyaXB0aW9uLFxuXHRcdFx0XHRcdFx0XHRcdG9uQ2hhbmdlOiBmdW5jdGlvbiBvbkNoYW5nZShldmVudCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0X3RoaXMzLnNldFN0YXRlKHsgZmlsZWRlc2NyaXB0aW9uOiBldmVudC50YXJnZXQudmFsdWUgfSk7XG5cdFx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0XHRfX3NvdXJjZToge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcblx0XHRcdFx0XHRcdFx0XHRcdGxpbmVOdW1iZXI6IDg3XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9KVxuXHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG5cdFx0XHRcdFx0XHRcdEZvcm0uRmllbGQsXG5cdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHRfX3NvdXJjZToge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcblx0XHRcdFx0XHRcdFx0XHRcdGxpbmVOdW1iZXI6IDk0XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHRSZWFjdC5jcmVhdGVFbGVtZW50KFxuXHRcdFx0XHRcdFx0XHRcdFwibGFiZWxcIixcblx0XHRcdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdFx0XHRfX3NvdXJjZToge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRmaWxlTmFtZTogX2pzeEZpbGVOYW1lLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRsaW5lTnVtYmVyOiA5NVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcdFx0XCJGaWxlIGRpcmVjdG9yeVwiXG5cdFx0XHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0XHRcdFJlYWN0LmNyZWF0ZUVsZW1lbnQoRm9ybS5JbnB1dCwgeyB0eXBlOiBcImZpbGVcIiwgb25DaGFuZ2U6IHRoaXMub25DaGFuZ2UsIF9fc291cmNlOiB7XG5cdFx0XHRcdFx0XHRcdFx0XHRmaWxlTmFtZTogX2pzeEZpbGVOYW1lLFxuXHRcdFx0XHRcdFx0XHRcdFx0bGluZU51bWJlcjogOTZcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0pXG5cdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0UmVhY3QuY3JlYXRlRWxlbWVudChcblx0XHRcdFx0XHRcdFx0Rm9ybS5CdXR0b24sXG5cdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHRjb2xvcjogXCJibHVlXCIsXG5cdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJzdWJtaXRcIixcblx0XHRcdFx0XHRcdFx0XHRsb2FkaW5nOiB0aGlzLnN0YXRlLmxvYWRpbmcsXG5cdFx0XHRcdFx0XHRcdFx0X19zb3VyY2U6IHtcblx0XHRcdFx0XHRcdFx0XHRcdGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsXG5cdFx0XHRcdFx0XHRcdFx0XHRsaW5lTnVtYmVyOiA5OFxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0XCJTdWJtaXRcIlxuXHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdFJlYWN0LmNyZWF0ZUVsZW1lbnQoTWVzc2FnZSwgeyBlcnJvcjogdHJ1ZSwgaGVhZGVyOiBcIk9vcHMhXCIsIGNvbnRlbnQ6IHRoaXMuc3RhdGUuZXJyb3JNZXNzYWdlLCBfX3NvdXJjZToge1xuXHRcdFx0XHRcdFx0XHRcdGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsXG5cdFx0XHRcdFx0XHRcdFx0bGluZU51bWJlcjogMTA1XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0pXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHQpXG5cdFx0XHQpO1xuXHRcdH1cblx0fV0sIFt7XG5cdFx0a2V5OiBcImdldEluaXRpYWxQcm9wc1wiLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiAoKSB7XG5cdFx0XHR2YXIgX3JlZjUgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNChwcm9wcykge1xuXHRcdFx0XHR2YXIgYWRkcmVzcztcblx0XHRcdFx0cmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNCQoX2NvbnRleHQ0KSB7XG5cdFx0XHRcdFx0d2hpbGUgKDEpIHtcblx0XHRcdFx0XHRcdHN3aXRjaCAoX2NvbnRleHQ0LnByZXYgPSBfY29udGV4dDQubmV4dCkge1xuXHRcdFx0XHRcdFx0XHRjYXNlIDA6XG5cdFx0XHRcdFx0XHRcdFx0YWRkcmVzcyA9IHByb3BzLnF1ZXJ5LmFkZHJlc3M7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIF9jb250ZXh0NC5hYnJ1cHQoXCJyZXR1cm5cIiwgeyBhZGRyZXNzOiBhZGRyZXNzIH0pO1xuXG5cdFx0XHRcdFx0XHRcdGNhc2UgMjpcblx0XHRcdFx0XHRcdFx0Y2FzZSBcImVuZFwiOlxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBfY29udGV4dDQuc3RvcCgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSwgX2NhbGxlZTQsIHRoaXMpO1xuXHRcdFx0fSkpO1xuXG5cdFx0XHRmdW5jdGlvbiBnZXRJbml0aWFsUHJvcHMoX3g0KSB7XG5cdFx0XHRcdHJldHVybiBfcmVmNS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZ2V0SW5pdGlhbFByb3BzO1xuXHRcdH0oKVxuXHR9XSk7XG5cblx0cmV0dXJuIFVwbG9hZDtcbn0oQ29tcG9uZW50KTtcblxuZXhwb3J0IGRlZmF1bHQgVXBsb2FkOyJdfQ==
//# sourceMappingURL=data:application/json;charset=utf-8;base64,