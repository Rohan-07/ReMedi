"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require("babel-runtime/core-js/object/get-prototype-of");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _Layout = require("../../components/Layout");

var _Layout2 = _interopRequireDefault(_Layout);

var _ReMedi = require("../../ethereum/ReMedi");

var _ReMedi2 = _interopRequireDefault(_ReMedi);

var _semanticUiReact = require("semantic-ui-react");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = "D:\\Temp_exp\\ReMedi\\pages\\Doctor\\index.js?entry";


var DoctorPage = function (_Component) {
	(0, _inherits3.default)(DoctorPage, _Component);

	function DoctorPage() {
		(0, _classCallCheck3.default)(this, DoctorPage);

		return (0, _possibleConstructorReturn3.default)(this, (DoctorPage.__proto__ || (0, _getPrototypeOf2.default)(DoctorPage)).apply(this, arguments));
	}

	(0, _createClass3.default)(DoctorPage, [{
		key: "renderFiles",
		value: function renderFiles() {
			if (this.props.files.length == 0) {
				return _react2.default.createElement(_semanticUiReact.Segment, {
					__source: {
						fileName: _jsxFileName,
						lineNumber: 23
					}
				}, _react2.default.createElement(_semanticUiReact.Header, { icon: true, textAlign: "center", __source: {
						fileName: _jsxFileName,
						lineNumber: 24
					}
				}, _react2.default.createElement(_semanticUiReact.Icon, { name: "pdf file outline", __source: {
						fileName: _jsxFileName,
						lineNumber: 25
					}
				}), "No documents are listed for you."));
			}
			var items = this.props.files.map(function (file) {
				return {
					header: file[2],
					description: file[3],
					meta: "From : " + file[1],
					extra: _react2.default.createElement(_semanticUiReact.Container, { textAlign: "center", __source: {
							fileName: _jsxFileName,
							lineNumber: 37
						}
					}, _react2.default.createElement("a", { href: "https://www.ipfs.io/ipfs/" + file[0], __source: {
							fileName: _jsxFileName,
							lineNumber: 38
						}
					}, _react2.default.createElement(_semanticUiReact.Button, { color: "green", fluid: true, __source: {
							fileName: _jsxFileName,
							lineNumber: 39
						}
					}, "View File"))),
					style: { overflowWrap: "break-word" }
				};
			});
			return _react2.default.createElement(_semanticUiReact.Card.Group, { items: items, __source: {
					fileName: _jsxFileName,
					lineNumber: 48
				}
			});
		}
	}, {
		key: "render",
		value: function render() {
			return _react2.default.createElement(_Layout2.default, {
				__source: {
					fileName: _jsxFileName,
					lineNumber: 52
				}
			}, _react2.default.createElement("h1", {
				__source: {
					fileName: _jsxFileName,
					lineNumber: 53
				}
			}, "Doctor Home Page"), this.renderFiles());
		}
	}], [{
		key: "getInitialProps",
		value: function () {
			var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(props) {
				var address, files;
				return _regenerator2.default.wrap(function _callee$(_context) {
					while (1) {
						switch (_context.prev = _context.next) {
							case 0:
								address = props.query.address;
								_context.next = 3;
								return _ReMedi2.default.methods.getAccessFiles().call({ from: address });

							case 3:
								files = _context.sent;
								return _context.abrupt("return", { files: files, address: address });

							case 5:
							case "end":
								return _context.stop();
						}
					}
				}, _callee, this);
			}));

			function getInitialProps(_x) {
				return _ref.apply(this, arguments);
			}

			return getInitialProps;
		}()
	}]);

	return DoctorPage;
}(_react.Component);

exports.default = DoctorPage;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiRG9jdG9yUGFnZSIsIl9Db21wb25lbnQiLCJfX3Byb3RvX18iLCJhcHBseSIsImFyZ3VtZW50cyIsImtleSIsInZhbHVlIiwicmVuZGVyRmlsZXMiLCJwcm9wcyIsImZpbGVzIiwibGVuZ3RoIiwiY3JlYXRlRWxlbWVudCIsIl9fc291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiaWNvbiIsInRleHRBbGlnbiIsIm5hbWUiLCJpdGVtcyIsIm1hcCIsImZpbGUiLCJoZWFkZXIiLCJkZXNjcmlwdGlvbiIsIm1ldGEiLCJleHRyYSIsImhyZWYiLCJjb2xvciIsImZsdWlkIiwic3R5bGUiLCJvdmVyZmxvd1dyYXAiLCJHcm91cCIsInJlbmRlciIsIl9yZWYiLCJtYXJrIiwiX2NhbGxlZSIsImFkZHJlc3MiLCJ3cmFwIiwiX2NhbGxlZSQiLCJfY29udGV4dCIsInByZXYiLCJuZXh0IiwicXVlcnkiLCJtZXRob2RzIiwiZ2V0QWNjZXNzRmlsZXMiLCJjYWxsIiwiZnJvbSIsInNlbnQiLCJhYnJ1cHQiLCJzdG9wIiwiZ2V0SW5pdGlhbFByb3BzIiwiX3giXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFKQSxJQUFJQSxlQUFlLHFEQUFuQjs7O0FBTUEsSUFBSUMsYUFBYSxVQUFVQyxVQUFWLEVBQXNCO0FBQ3RDLHlCQUFVRCxVQUFWLEVBQXNCQyxVQUF0Qjs7QUFFQSxVQUFTRCxVQUFULEdBQXNCO0FBQ3JCLGdDQUFnQixJQUFoQixFQUFzQkEsVUFBdEI7O0FBRUEsU0FBTyx5Q0FBMkIsSUFBM0IsRUFBaUMsQ0FBQ0EsV0FBV0UsU0FBWCxJQUF3Qiw4QkFBdUJGLFVBQXZCLENBQXpCLEVBQTZERyxLQUE3RCxDQUFtRSxJQUFuRSxFQUF5RUMsU0FB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